// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`ESLint Configurations invalid.base.js should have the expected linting issues 1`] = `
{
  "errorCount": 15,
  "filePath": "invalid.base.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
    ],
    "ruleBreakdown": {},
    "totalFiltered": 0,
  },
  "messages": [
    {
      "column": 13,
      "line": 4,
      "message": "Strings must use singlequote.",
      "ruleId": "@stylistic/quotes",
      "severity": "error",
    },
    {
      "column": 18,
      "line": 4,
      "message": "Missing semicolon.",
      "ruleId": "@stylistic/semi",
      "severity": "error",
    },
    {
      "column": 15,
      "line": 7,
      "message": "Strings must use singlequote.",
      "ruleId": "@stylistic/quotes",
      "severity": "error",
    },
    {
      "column": 13,
      "line": 12,
      "message": "Unexpected trailing comma.",
      "ruleId": "@stylistic/comma-dangle",
      "severity": "error",
    },
    {
      "column": 27,
      "line": 16,
      "message": "Trailing spaces not allowed.",
      "ruleId": "@stylistic/no-trailing-spaces",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 19,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 20,
      "message": "Expected indentation of 2 spaces but found 0.",
      "ruleId": "@stylistic/indent",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 23,
      "message": "Comments may not exceed 180 characters",
      "ruleId": "comment-length/limit-single-line-comments",
      "severity": "warning",
    },
    {
      "column": 1,
      "line": 23,
      "message": "This line has a comment length of 234. Maximum allowed is 180.",
      "ruleId": "@stylistic/max-len",
      "severity": "error",
    },
    {
      "column": 7,
      "line": 27,
      "message": "'fs' is assigned a value but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 12,
      "line": 27,
      "message": "'require' is not defined.",
      "ruleId": "no-undef",
      "severity": "error",
    },
    {
      "column": 7,
      "line": 28,
      "message": "'path' is assigned a value but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 14,
      "line": 28,
      "message": "'require' is not defined.",
      "ruleId": "no-undef",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 31,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 35,
      "message": "Missing JSDoc @param "param1" declaration.",
      "ruleId": "jsdoc/require-param",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 35,
      "message": "Missing JSDoc @param "param2" declaration.",
      "ruleId": "jsdoc/require-param",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 35,
      "message": "Missing JSDoc @returns declaration.",
      "ruleId": "jsdoc/require-returns",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 54,
      "message": "'module' is not defined.",
      "ruleId": "no-undef",
      "severity": "error",
    },
  ],
  "totalIssues": 18,
  "warningCount": 3,
}
`;

exports[`ESLint Configurations invalid.jest.js should have the expected linting issues 1`] = `
{
  "errorCount": 5,
  "filePath": "invalid.jest.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
    ],
    "ruleBreakdown": {},
    "totalFiltered": 0,
  },
  "messages": [
    {
      "column": 1,
      "line": 4,
      "message": "Test has no assertions",
      "ruleId": "jest/expect-expect",
      "severity": "error",
    },
    {
      "column": 6,
      "line": 10,
      "message": "Unexpected focused test",
      "ruleId": "jest/no-focused-tests",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 15,
      "message": "Tests should not be skipped",
      "ruleId": "jest/no-disabled-tests",
      "severity": "warning",
    },
    {
      "column": 6,
      "line": 24,
      "message": "Test title is used multiple times in the same describe block",
      "ruleId": "jest/no-identical-title",
      "severity": "error",
    },
    {
      "column": 3,
      "line": 30,
      "message": "Expect must have a corresponding matcher call",
      "ruleId": "jest/valid-expect",
      "severity": "error",
    },
    {
      "column": 3,
      "line": 35,
      "message": "Test has no assertions",
      "ruleId": "jest/expect-expect",
      "severity": "error",
    },
  ],
  "totalIssues": 6,
  "warningCount": 1,
}
`;

exports[`ESLint Configurations invalid.json.json should have the expected linting issues 1`] = `
{
  "errorCount": 2,
  "filePath": "invalid.json.json",
  "filtering": {
    "appliedFilters": [
      "no-undef",
    ],
    "ruleBreakdown": {},
    "totalFiltered": 0,
  },
  "messages": [
    {
      "column": 19,
      "line": 11,
      "message": "Value expected",
      "ruleId": "json/*",
      "severity": "error",
    },
    {
      "column": 7,
      "line": 18,
      "message": "Trailing comma",
      "ruleId": "json/*",
      "severity": "error",
    },
  ],
  "totalIssues": 2,
  "warningCount": 0,
}
`;

exports[`ESLint Configurations invalid.node.js should have the expected linting issues 1`] = `
{
  "errorCount": 11,
  "filePath": "invalid.node.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
    ],
    "ruleBreakdown": {},
    "totalFiltered": 0,
  },
  "messages": [
    {
      "column": 19,
      "line": 5,
      "message": "'util.isArray' was deprecated since v4.0.0. Use 'Array.isArray()' instead.",
      "ruleId": "n/no-deprecated-api",
      "severity": "error",
    },
    {
      "column": 7,
      "line": 8,
      "message": "'missingModule' is assigned a value but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 31,
      "line": 8,
      "message": "Can't resolve 'non-existent-module' in '<PROJECT_ROOT>/tests/__fixtures__'",
      "ruleId": "n/no-missing-require",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 11,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 3,
      "line": 12,
      "message": "Don't use process.exit(); throw an error instead.",
      "ruleId": "n/no-process-exit",
      "severity": "warning",
    },
    {
      "column": 7,
      "line": 16,
      "message": "'path' is assigned a value but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 14,
      "line": 16,
      "message": "\`path\` import should occur before import of \`non-existent-module\`",
      "ruleId": "import/order",
      "severity": "error",
    },
    {
      "column": 18,
      "line": 17,
      "message": "Use path.join() or path.resolve() instead of string concatenation.",
      "ruleId": "n/no-path-concat",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 20,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 18,
      "line": 21,
      "message": "Calls to require() should use string literals",
      "ruleId": "import/no-dynamic-require",
      "severity": "warning",
    },
    {
      "column": 3,
      "line": 22,
      "message": "Expected blank line before this statement.",
      "ruleId": "@stylistic/padding-line-between-statements",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 26,
      "message": "'test' is not defined.",
      "ruleId": "no-undef",
      "severity": "error",
    },
    {
      "column": 9,
      "line": 27,
      "message": "'value' is assigned a value but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 1,
      "line": 32,
      "message": "'test' is not defined.",
      "ruleId": "no-undef",
      "severity": "error",
    },
    {
      "column": 3,
      "line": 33,
      "message": "'expect' is not defined.",
      "ruleId": "no-undef",
      "severity": "error",
    },
    {
      "column": 3,
      "line": 39,
      "message": "Expected blank line before this statement.",
      "ruleId": "@stylistic/padding-line-between-statements",
      "severity": "error",
    },
  ],
  "totalIssues": 16,
  "warningCount": 5,
}
`;

exports[`ESLint Configurations invalid.react.jsx should have the expected linting issues 1`] = `
{
  "errorCount": 24,
  "filePath": "invalid.react.jsx",
  "filtering": {
    "appliedFilters": [
      "no-undef",
    ],
    "ruleBreakdown": {},
    "totalFiltered": 0,
  },
  "messages": [
    {
      "column": 19,
      "line": 3,
      "message": "Unable to resolve path to module 'react'.",
      "ruleId": "import/no-unresolved",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 9,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 18,
      "line": 10,
      "message": "Value must be omitted for boolean attribute \`disabled\`",
      "ruleId": "react/jsx-boolean-value",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 14,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 10,
      "line": 17,
      "message": "Expected indentation of 8 space characters but found 4.",
      "ruleId": "react/jsx-indent",
      "severity": "error",
    },
    {
      "column": 10,
      "line": 17,
      "message": "Expected indentation of 8 spaces but found 4.",
      "ruleId": "@stylistic/indent",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 19,
      "message": "Expected indentation of 6 spaces but found 8.",
      "ruleId": "@stylistic/indent",
      "severity": "error",
    },
    {
      "column": 9,
      "line": 19,
      "message": "Expected indentation of 6 space characters but found 8.",
      "ruleId": "react/jsx-indent",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 25,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 3,
      "line": 27,
      "message": "Expected blank line before this statement.",
      "ruleId": "@stylistic/padding-line-between-statements",
      "severity": "error",
    },
    {
      "column": 26,
      "line": 29,
      "message": "Missing "key" prop for element in iterator",
      "ruleId": "react/jsx-key",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 35,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 31,
      "line": 36,
      "message": "No duplicate props allowed",
      "ruleId": "react/jsx-no-duplicate-props",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 40,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 7,
      "line": 43,
      "message": "img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",
      "ruleId": "jsx-a11y/alt-text",
      "severity": "error",
    },
    {
      "column": 7,
      "line": 44,
      "message": "The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",
      "ruleId": "jsx-a11y/anchor-is-valid",
      "severity": "warning",
    },
    {
      "column": 7,
      "line": 45,
      "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
      "ruleId": "jsx-a11y/click-events-have-key-events",
      "severity": "warning",
    },
    {
      "column": 15,
      "line": 46,
      "message": "Unknown property 'autofocus' found, use 'autoFocus' instead",
      "ruleId": "react/no-unknown-property",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 52,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 17,
      "line": 53,
      "message": "'setCount' is assigned a value but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 6,
      "line": 58,
      "message": "React Hook React.useEffect has a missing dependency: 'count'. Either include it or remove the dependency array.",
      "ruleId": "react-hooks/exhaustive-deps",
      "severity": "warning",
    },
    {
      "column": 5,
      "line": 62,
      "message": "React Hook "React.useEffect" is called conditionally. React Hooks must be called in the exact same order in every component render.",
      "ruleId": "react-hooks/rules-of-hooks",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 71,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 14,
      "line": 72,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 5,
      "line": 74,
      "message": "State initialization should be in a class property",
      "ruleId": "react/state-in-constructor",
      "severity": "warning",
    },
    {
      "column": 12,
      "line": 77,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 5,
      "line": 79,
      "message": "Do not mutate state directly. Use setState().",
      "ruleId": "react/no-direct-mutation-state",
      "severity": "error",
    },
    {
      "column": 9,
      "line": 82,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 88,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
  ],
  "totalIssues": 29,
  "warningCount": 5,
}
`;

exports[`Rule Conflicts conflicts.arrow-parens.js should not have errors for arrow functions with parentheses (Note: Added enforceForArrowConditionals: false to no-extra-parens rule and reduced severity to warning) 1`] = `
{
  "errorCount": 1,
  "filePath": "conflicts.arrow-parens.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
      "jsdoc/require-jsdoc",
      "jsdoc/tag-lines",
      "jsdoc/require-param",
      "jsdoc/require-returns",
    ],
    "ruleBreakdown": {
      "no-undef": 1,
    },
    "totalFiltered": 1,
  },
  "messages": [
    {
      "column": 23,
      "line": 14,
      "message": "Unnecessary parentheses around expression.",
      "ruleId": "@stylistic/no-extra-parens",
      "severity": "warning",
    },
    {
      "column": 32,
      "line": 17,
      "message": "Unexpected block statement surrounding arrow body; move the returned value immediately after the \`=>\`.",
      "ruleId": "arrow-body-style",
      "severity": "error",
    },
  ],
  "totalIssues": 2,
  "warningCount": 1,
}
`;

exports[`Rule Conflicts conflicts.cond-assign-parens.js should not have errors for assignments in conditional expressions with parentheses (Note: Added conditionalAssign: false to no-extra-parens rule to allow parentheses around assignments in conditions) 1`] = `
{
  "errorCount": 0,
  "filePath": "conflicts.cond-assign-parens.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
      "jsdoc/require-jsdoc",
      "jsdoc/tag-lines",
      "jsdoc/require-param",
      "jsdoc/require-returns",
    ],
    "ruleBreakdown": {
      "no-undef": 1,
    },
    "totalFiltered": 1,
  },
  "messages": [],
  "totalIssues": 0,
  "warningCount": 0,
}
`;

exports[`Rule Conflicts conflicts.rule-conflict.js should not have conflicts between padded-blocks and lines-around-comment (Note: Added allowBlockStart: true to lines-around-comment rule) 1`] = `
{
  "errorCount": 0,
  "filePath": "conflicts.rule-conflict.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
      "jsdoc/require-jsdoc",
      "jsdoc/tag-lines",
      "jsdoc/require-param",
      "jsdoc/require-returns",
    ],
    "ruleBreakdown": {
      "jsdoc/require-jsdoc": 1,
      "jsdoc/tag-lines": 5,
      "no-undef": 1,
    },
    "totalFiltered": 7,
  },
  "messages": [],
  "totalIssues": 0,
  "warningCount": 0,
}
`;

exports[`Rule Customizations custom.array-bracket-newline.js should enforce consistent array and object formatting (Note: Set to "consistent" to require consistent line breaks inside array brackets) 1`] = `
{
  "errorCount": 1,
  "filePath": "custom.array-bracket-newline.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
      "jsdoc/require-jsdoc",
      "jsdoc/tag-lines",
      "jsdoc/require-param",
      "jsdoc/require-returns",
      "arrow-body-style",
      "@stylistic/max-statements-per-line",
    ],
    "ruleBreakdown": {
      "jsdoc/require-jsdoc": 3,
      "no-undef": 1,
    },
    "totalFiltered": 4,
  },
  "messages": [
    {
      "column": 14,
      "line": 65,
      "message": "Missing space before function parentheses.",
      "ruleId": "@stylistic/space-before-function-paren",
      "severity": "error",
    },
  ],
  "totalIssues": 1,
  "warningCount": 0,
}
`;

exports[`Rule Customizations custom.brace-style.js should enforce consistent line breaking and formatting (Note: Configured as 1tbs with allowSingleLine: true to allow consistent brace style with flexibility for single-line blocks) 1`] = `
{
  "errorCount": 11,
  "filePath": "custom.brace-style.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
      "jsdoc/require-jsdoc",
      "jsdoc/tag-lines",
      "jsdoc/require-param",
      "jsdoc/require-returns",
      "arrow-body-style",
      "@stylistic/max-statements-per-line",
    ],
    "ruleBreakdown": {
      "@stylistic/max-statements-per-line": 1,
      "jsdoc/require-jsdoc": 11,
      "no-undef": 1,
    },
    "totalFiltered": 13,
  },
  "messages": [
    {
      "column": 7,
      "line": 9,
      "message": "Unexpected constant condition.",
      "ruleId": "no-constant-condition",
      "severity": "error",
    },
    {
      "column": 3,
      "line": 16,
      "message": "Unreachable code.",
      "ruleId": "no-unreachable",
      "severity": "error",
    },
    {
      "column": 7,
      "line": 16,
      "message": "Unexpected constant condition.",
      "ruleId": "no-constant-condition",
      "severity": "error",
    },
    {
      "column": 45,
      "line": 51,
      "message": "'arg1' is defined but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 51,
      "line": 51,
      "message": "'arg2' is defined but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 5,
      "line": 77,
      "message": "Expected blank line before this statement.",
      "ruleId": "@stylistic/padding-line-between-statements",
      "severity": "error",
    },
    {
      "column": 5,
      "line": 82,
      "message": "Expected blank line before this statement.",
      "ruleId": "@stylistic/padding-line-between-statements",
      "severity": "error",
    },
    {
      "column": 3,
      "line": 91,
      "message": "Expected blank line before this statement.",
      "ruleId": "@stylistic/padding-line-between-statements",
      "severity": "error",
    },
    {
      "column": 27,
      "line": 101,
      "message": "Unexpected constant condition.",
      "ruleId": "no-constant-condition",
      "severity": "error",
    },
    {
      "column": 73,
      "line": 102,
      "message": "'?' should be placed at the beginning of the line.",
      "ruleId": "@stylistic/operator-linebreak",
      "severity": "error",
    },
    {
      "column": 35,
      "line": 103,
      "message": "':' should be placed at the beginning of the line.",
      "ruleId": "@stylistic/operator-linebreak",
      "severity": "error",
    },
    {
      "column": 10,
      "line": 135,
      "message": "Expected to return a value at the end of function 'nonblockStatementBodyPositionCorrect'.",
      "ruleId": "consistent-return",
      "severity": "warning",
    },
    {
      "column": 7,
      "line": 136,
      "message": "Unexpected constant condition.",
      "ruleId": "no-constant-condition",
      "severity": "error",
    },
    {
      "column": 10,
      "line": 138,
      "message": "Unexpected constant condition.",
      "ruleId": "no-constant-condition",
      "severity": "error",
    },
  ],
  "totalIssues": 14,
  "warningCount": 3,
}
`;

exports[`Rule Customizations custom.comma-dangle.js should enforce consistent punctuation usage (Note: Set to "never" to disallow trailing commas in objects and arrays) 1`] = `
{
  "errorCount": 2,
  "filePath": "custom.comma-dangle.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
      "jsdoc/require-jsdoc",
      "jsdoc/tag-lines",
      "jsdoc/require-param",
      "jsdoc/require-returns",
      "arrow-body-style",
      "@stylistic/max-statements-per-line",
    ],
    "ruleBreakdown": {
      "jsdoc/require-jsdoc": 5,
      "no-undef": 1,
    },
    "totalFiltered": 6,
  },
  "messages": [
    {
      "column": 1,
      "line": 73,
      "message": "Expected blank line before this statement.",
      "ruleId": "@stylistic/padding-line-between-statements",
      "severity": "error",
    },
    {
      "column": 26,
      "line": 110,
      "message": "Unexpected unnamed function.",
      "ruleId": "func-names",
      "severity": "error",
    },
  ],
  "totalIssues": 2,
  "warningCount": 0,
}
`;

exports[`Rule Customizations custom.cond-assign.js should allow assignments in while loop conditions with parentheses (Note: Changed from "always" to "except-parens" to allow assignments in parenthesized expressions) 1`] = `
{
  "errorCount": 0,
  "filePath": "custom.cond-assign.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
      "jsdoc/require-jsdoc",
      "jsdoc/tag-lines",
      "jsdoc/require-param",
      "jsdoc/require-returns",
      "arrow-body-style",
      "@stylistic/max-statements-per-line",
    ],
    "ruleBreakdown": {
      "no-undef": 1,
    },
    "totalFiltered": 1,
  },
  "messages": [],
  "totalIssues": 0,
  "warningCount": 0,
}
`;

exports[`Rule Customizations custom.function-paren-newline.js should allow consistent function parameter formatting (Note: Changed from "multiline-arguments" to "consistent" to allow more flexible function parameter formatting) 1`] = `
{
  "errorCount": 0,
  "filePath": "custom.function-paren-newline.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
      "jsdoc/require-jsdoc",
      "jsdoc/tag-lines",
      "jsdoc/require-param",
      "jsdoc/require-returns",
      "arrow-body-style",
      "@stylistic/max-statements-per-line",
    ],
    "ruleBreakdown": {
      "jsdoc/require-param": 3,
      "no-undef": 1,
    },
    "totalFiltered": 4,
  },
  "messages": [],
  "totalIssues": 0,
  "warningCount": 0,
}
`;

exports[`Rule Customizations custom.indent.js should properly indent various code constructs (Note: Expanded configuration to provide consistent indentation for arrays, function calls, function declarations, imports, and objects) 1`] = `
{
  "errorCount": 0,
  "filePath": "custom.indent.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
      "jsdoc/require-jsdoc",
      "jsdoc/tag-lines",
      "jsdoc/require-param",
      "jsdoc/require-returns",
      "arrow-body-style",
      "@stylistic/max-statements-per-line",
    ],
    "ruleBreakdown": {
      "arrow-body-style": 1,
      "jsdoc/require-jsdoc": 4,
      "no-undef": 1,
    },
    "totalFiltered": 6,
  },
  "messages": [],
  "totalIssues": 0,
  "warningCount": 0,
}
`;

exports[`Rule Customizations custom.jsdoc-undefined-types.js should allow undefined types in JSDoc comments (Note: Changed from error (2) to off (0) to allow undefined types in JSDoc comments) 1`] = `
{
  "errorCount": 0,
  "filePath": "custom.jsdoc-undefined-types.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
      "arrow-body-style",
      "@stylistic/max-statements-per-line",
    ],
    "ruleBreakdown": {
      "no-undef": 1,
    },
    "totalFiltered": 1,
  },
  "messages": [],
  "totalIssues": 0,
  "warningCount": 0,
}
`;

exports[`Rule Customizations custom.newline-per-chained-call.js should allow up to 4 method calls in a chain without line breaks (Note: Increased ignoreChainWithDepth from 3 to 4 to allow more method chaining on a single line) 1`] = `
{
  "errorCount": 6,
  "filePath": "custom.newline-per-chained-call.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
      "jsdoc/require-jsdoc",
      "jsdoc/tag-lines",
      "jsdoc/require-param",
      "jsdoc/require-returns",
      "arrow-body-style",
      "@stylistic/max-statements-per-line",
    ],
    "ruleBreakdown": {
      "jsdoc/require-jsdoc": 11,
      "no-undef": 1,
    },
    "totalFiltered": 12,
  },
  "messages": [
    {
      "column": 5,
      "line": 13,
      "message": "Expected blank line before this statement.",
      "ruleId": "@stylistic/padding-line-between-statements",
      "severity": "error",
    },
    {
      "column": 5,
      "line": 18,
      "message": "Expected blank line before this statement.",
      "ruleId": "@stylistic/padding-line-between-statements",
      "severity": "error",
    },
    {
      "column": 5,
      "line": 23,
      "message": "Expected blank line before this statement.",
      "ruleId": "@stylistic/padding-line-between-statements",
      "severity": "error",
    },
    {
      "column": 5,
      "line": 28,
      "message": "Expected blank line before this statement.",
      "ruleId": "@stylistic/padding-line-between-statements",
      "severity": "error",
    },
    {
      "column": 5,
      "line": 33,
      "message": "Expected blank line before this statement.",
      "ruleId": "@stylistic/padding-line-between-statements",
      "severity": "error",
    },
    {
      "column": 67,
      "line": 73,
      "message": "Expected line break before \`.method5\`.",
      "ruleId": "@stylistic/newline-per-chained-call",
      "severity": "error",
    },
  ],
  "totalIssues": 6,
  "warningCount": 0,
}
`;

exports[`Rule Customizations custom.no-extra-parens.js should allow parentheses around logical expressions in spread elements (Note: Configured allowNodesInSpreadElement to allow parentheses around logical expressions in spread elements) 1`] = `
{
  "errorCount": 0,
  "filePath": "custom.no-extra-parens.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
      "jsdoc/require-jsdoc",
      "jsdoc/tag-lines",
      "jsdoc/require-param",
      "jsdoc/require-returns",
      "arrow-body-style",
      "@stylistic/max-statements-per-line",
    ],
    "ruleBreakdown": {
      "no-undef": 1,
    },
    "totalFiltered": 1,
  },
  "messages": [],
  "totalIssues": 0,
  "warningCount": 0,
}
`;

exports[`Rule Customizations custom.space-before-function-paren.js should enforce consistent spacing in various code constructs (Note: Configured to require space before function parentheses for anonymous and async arrow functions, no space for named functions) 1`] = `
{
  "errorCount": 2,
  "filePath": "custom.space-before-function-paren.js",
  "filtering": {
    "appliedFilters": [
      "no-undef",
      "jsdoc/require-jsdoc",
      "jsdoc/tag-lines",
      "jsdoc/require-param",
      "jsdoc/require-returns",
      "arrow-body-style",
      "@stylistic/max-statements-per-line",
    ],
    "ruleBreakdown": {
      "@stylistic/max-statements-per-line": 1,
      "arrow-body-style": 1,
      "jsdoc/require-jsdoc": 5,
      "no-undef": 1,
    },
    "totalFiltered": 8,
  },
  "messages": [
    {
      "column": 7,
      "line": 41,
      "message": "Unexpected constant condition.",
      "ruleId": "no-constant-condition",
      "severity": "error",
    },
    {
      "column": 42,
      "line": 86,
      "message": "Unexpected parentheses around single function argument.",
      "ruleId": "@stylistic/arrow-parens",
      "severity": "error",
    },
  ],
  "totalIssues": 2,
  "warningCount": 0,
}
`;
