// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`ESLint Configurations base.invalid.js should have the expected linting issues 1`] = `
{
  "errorCount": 12,
  "filePath": "base.invalid.js",
  "messages": [
    {
      "column": 13,
      "line": 4,
      "message": "Replace \`"bar"\` with \`'bar';\`",
      "ruleId": "prettier/prettier",
      "severity": "error",
    },
    {
      "column": 15,
      "line": 7,
      "message": "Replace \`"world"\` with \`'world'\`",
      "ruleId": "prettier/prettier",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 13,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 14,
      "message": "Insert \`··\`",
      "ruleId": "prettier/prettier",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 17,
      "message": "Comments may not exceed 120 characters",
      "ruleId": "comment-length/limit-single-line-comments",
      "severity": "warning",
    },
    {
      "column": 17,
      "line": 18,
      "message": "Insert \`⏎·\`",
      "ruleId": "prettier/prettier",
      "severity": "error",
    },
    {
      "column": 7,
      "line": 21,
      "message": "'fs' is assigned a value but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 12,
      "line": 21,
      "message": "'require' is not defined.",
      "ruleId": "no-undef",
      "severity": "error",
    },
    {
      "column": 7,
      "line": 22,
      "message": "'path' is assigned a value but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 14,
      "line": 22,
      "message": "'require' is not defined.",
      "ruleId": "no-undef",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 25,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 29,
      "message": "Missing JSDoc @param "param1" declaration.",
      "ruleId": "jsdoc/require-param",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 29,
      "message": "Missing JSDoc @param "param2" declaration.",
      "ruleId": "jsdoc/require-param",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 29,
      "message": "Missing JSDoc @returns declaration.",
      "ruleId": "jsdoc/require-returns",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 36,
      "message": "'module' is not defined.",
      "ruleId": "no-undef",
      "severity": "error",
    },
  ],
  "totalIssues": 15,
  "warningCount": 3,
}
`;

exports[`ESLint Configurations jest.invalid.js should have the expected linting issues 1`] = `
{
  "errorCount": 5,
  "filePath": "jest.invalid.js",
  "messages": [
    {
      "column": 1,
      "line": 4,
      "message": "Test has no assertions",
      "ruleId": "jest/expect-expect",
      "severity": "error",
    },
    {
      "column": 6,
      "line": 10,
      "message": "Unexpected focused test",
      "ruleId": "jest/no-focused-tests",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 15,
      "message": "Tests should not be skipped",
      "ruleId": "jest/no-disabled-tests",
      "severity": "warning",
    },
    {
      "column": 6,
      "line": 24,
      "message": "Test title is used multiple times in the same describe block",
      "ruleId": "jest/no-identical-title",
      "severity": "error",
    },
    {
      "column": 3,
      "line": 30,
      "message": "Expect must have a corresponding matcher call",
      "ruleId": "jest/valid-expect",
      "severity": "error",
    },
    {
      "column": 3,
      "line": 35,
      "message": "Test has no assertions",
      "ruleId": "jest/expect-expect",
      "severity": "error",
    },
  ],
  "totalIssues": 6,
  "warningCount": 1,
}
`;

exports[`ESLint Configurations json.invalid.json should have the expected linting issues 1`] = `
{
  "errorCount": 2,
  "filePath": "json.invalid.json",
  "messages": [
    {
      "column": 19,
      "line": 11,
      "message": "Value expected",
      "ruleId": "json/*",
      "severity": "error",
    },
    {
      "column": 7,
      "line": 18,
      "message": "Trailing comma",
      "ruleId": "json/*",
      "severity": "error",
    },
  ],
  "totalIssues": 2,
  "warningCount": 0,
}
`;

exports[`ESLint Configurations node.invalid.js should have the expected linting issues 1`] = `
{
  "errorCount": 9,
  "filePath": "node.invalid.js",
  "messages": [
    {
      "column": 19,
      "line": 5,
      "message": "'util.isArray' was deprecated since v4.0.0. Use 'Array.isArray()' instead.",
      "ruleId": "n/no-deprecated-api",
      "severity": "error",
    },
    {
      "column": 7,
      "line": 8,
      "message": "'missingModule' is assigned a value but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 31,
      "line": 8,
      "message": "Can't resolve 'non-existent-module' in '<PROJECT_ROOT>/tests/__fixtures__'",
      "ruleId": "n/no-missing-require",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 11,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 3,
      "line": 12,
      "message": "Don't use process.exit(); throw an error instead.",
      "ruleId": "n/no-process-exit",
      "severity": "warning",
    },
    {
      "column": 7,
      "line": 16,
      "message": "'path' is assigned a value but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 14,
      "line": 16,
      "message": "\`path\` import should occur before import of \`non-existent-module\`",
      "ruleId": "import/order",
      "severity": "error",
    },
    {
      "column": 18,
      "line": 17,
      "message": "Use path.join() or path.resolve() instead of string concatenation.",
      "ruleId": "n/no-path-concat",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 20,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 18,
      "line": 21,
      "message": "Calls to require() should use string literals",
      "ruleId": "import/no-dynamic-require",
      "severity": "warning",
    },
    {
      "column": 1,
      "line": 26,
      "message": "'test' is not defined.",
      "ruleId": "no-undef",
      "severity": "error",
    },
    {
      "column": 9,
      "line": 27,
      "message": "'value' is assigned a value but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 1,
      "line": 32,
      "message": "'test' is not defined.",
      "ruleId": "no-undef",
      "severity": "error",
    },
    {
      "column": 3,
      "line": 33,
      "message": "'expect' is not defined.",
      "ruleId": "no-undef",
      "severity": "error",
    },
  ],
  "totalIssues": 14,
  "warningCount": 5,
}
`;

exports[`ESLint Configurations react.invalid.jsx should have the expected linting issues 1`] = `
{
  "errorCount": 24,
  "filePath": "react.invalid.jsx",
  "messages": [
    {
      "column": 19,
      "line": 3,
      "message": "Unable to resolve path to module 'react'.",
      "ruleId": "import/no-unresolved",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 9,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 18,
      "line": 10,
      "message": "Value must be omitted for boolean attribute \`disabled\`",
      "ruleId": "react/jsx-boolean-value",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 14,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 10,
      "line": 17,
      "message": "Replace \`⏎····Bad·indentation⏎········\` with \`Bad·indentation\`",
      "ruleId": "prettier/prettier",
      "severity": "error",
    },
    {
      "column": 10,
      "line": 17,
      "message": "Expected indentation of 8 space characters but found 4.",
      "ruleId": "react/jsx-indent",
      "severity": "error",
    },
    {
      "column": 9,
      "line": 19,
      "message": "Expected indentation of 6 space characters but found 8.",
      "ruleId": "react/jsx-indent",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 25,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 26,
      "line": 29,
      "message": "Replace \`<li>{item}</li>\` with \`(⏎········<li>{item}</li>⏎······)\`",
      "ruleId": "prettier/prettier",
      "severity": "error",
    },
    {
      "column": 26,
      "line": 29,
      "message": "Missing "key" prop for element in iterator",
      "ruleId": "react/jsx-key",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 35,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 10,
      "line": 36,
      "message": "Replace \`<div·className="one"·className="two">Duplicate</div>\` with \`(⏎····<div·className="one"·className="two">⏎······Duplicate⏎····</div>⏎··)\`",
      "ruleId": "prettier/prettier",
      "severity": "error",
    },
    {
      "column": 31,
      "line": 36,
      "message": "No duplicate props allowed",
      "ruleId": "react/jsx-no-duplicate-props",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 40,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 7,
      "line": 43,
      "message": "img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",
      "ruleId": "jsx-a11y/alt-text",
      "severity": "error",
    },
    {
      "column": 7,
      "line": 44,
      "message": "The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",
      "ruleId": "jsx-a11y/anchor-is-valid",
      "severity": "warning",
    },
    {
      "column": 7,
      "line": 45,
      "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
      "ruleId": "jsx-a11y/click-events-have-key-events",
      "severity": "warning",
    },
    {
      "column": 15,
      "line": 46,
      "message": "Unknown property 'autofocus' found, use 'autoFocus' instead",
      "ruleId": "react/no-unknown-property",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 52,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 17,
      "line": 53,
      "message": "'setCount' is assigned a value but never used.",
      "ruleId": "no-unused-vars",
      "severity": "warning",
    },
    {
      "column": 6,
      "line": 58,
      "message": "React Hook React.useEffect has a missing dependency: 'count'. Either include it or remove the dependency array.",
      "ruleId": "react-hooks/exhaustive-deps",
      "severity": "warning",
    },
    {
      "column": 5,
      "line": 62,
      "message": "React Hook "React.useEffect" is called conditionally. React Hooks must be called in the exact same order in every component render.",
      "ruleId": "react-hooks/rules-of-hooks",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 71,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 14,
      "line": 72,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 5,
      "line": 74,
      "message": "State initialization should be in a class property",
      "ruleId": "react/state-in-constructor",
      "severity": "warning",
    },
    {
      "column": 12,
      "line": 77,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 5,
      "line": 79,
      "message": "Do not mutate state directly. Use setState().",
      "ruleId": "react/no-direct-mutation-state",
      "severity": "error",
    },
    {
      "column": 9,
      "line": 82,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
    {
      "column": 1,
      "line": 88,
      "message": "Missing JSDoc comment.",
      "ruleId": "jsdoc/require-jsdoc",
      "severity": "error",
    },
  ],
  "totalIssues": 29,
  "warningCount": 5,
}
`;
